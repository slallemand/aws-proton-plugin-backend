{"version":3,"file":"index.cjs.js","sources":["../src/dynamic/index.ts"],"sourcesContent":["import { BackendDynamicPluginInstaller } from '@backstage/backend-dynamic-feature-service';\n\nexport const dynamicPluginInstaller: BackendDynamicPluginInstaller = {\n  kind: 'legacy',\n\n  // Contributions of the plugin to the application.\n  // Here optional fields allow embedding the code which is usually described in the plugin readme for manual addition.\n  // If a contribution is not used, the field should be omitted.\n\n  router: {\n    pluginID: 'router plugin ID, used as REST endpoint suffix',\n    createPlugin(env) {\n      // Return a promise to your router.\n      return Promise.reject(new Error('Not implemented'));\n    },\n  },\n\n  events(eventsBackend, env) {\n    // Do something with the events backend (add subscribers or publishers)\n    // and return a list of HttpPostIngressOptions that will be\n    // registered with the http event endpoint.\n    return [];\n  },\n\n  catalog(builder, env) {\n    // Add catalog contributions, such as\n    // entity providers or location analyzers.\n  },\n\n  scaffolder(env) {\n    // Return an array of scaffolder actions (TemplateAction)\n    // that will be registered with the scaffolder.\n    return [];\n  },\n\n  search(indexBuilder, schedule, env) {\n    // Add search contributions, such as\n    // collators and decorators.\n  },\n};"],"names":[],"mappings":";;;;AAEO,MAAM,sBAAwD,GAAA;AAAA,EACnE,IAAM,EAAA,QAAA;AAAA;AAAA;AAAA;AAAA,EAMN,MAAQ,EAAA;AAAA,IACN,QAAU,EAAA,gDAAA;AAAA,IACV,aAAa,GAAK,EAAA;AAEhB,MAAA,OAAO,OAAQ,CAAA,MAAA,CAAO,IAAI,KAAA,CAAM,iBAAiB,CAAC,CAAA,CAAA;AAAA,KACpD;AAAA,GACF;AAAA,EAEA,MAAA,CAAO,eAAe,GAAK,EAAA;AAIzB,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAAA,EAEA,OAAA,CAAQ,SAAS,GAAK,EAAA;AAAA,GAGtB;AAAA,EAEA,WAAW,GAAK,EAAA;AAGd,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAAA,EAEA,MAAA,CAAO,YAAc,EAAA,QAAA,EAAU,GAAK,EAAA;AAAA,GAGpC;AACF;;;;"}